package com.example.portfolio.controller;


import java.security.Principal;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.example.portfolio.entity.Task;
import com.example.portfolio.entity.User;
import com.example.portfolio.service.TaskService;
import com.example.portfolio.service.UserService;

@Controller
public class TaskController {

    @Autowired
    private TaskService taskService;

    @Autowired
    private UserService userService;

    // タスク一覧表示
    @GetMapping("/tasks")
    public String showTaskList(@RequestParam(defaultValue = "asc")String sort, 
    							@RequestParam (name = "status",required = false) String status,
    							Model model, Principal principal) {
    	
        Optional<User> userOpt = userService.findByEmail(principal.getName());
        
        if(userOpt.isEmpty()) {
        	 model.addAttribute("error", "未登録のユーザーです。");
             return"login";
        }
        
        User user = userOpt.get();
        
        Sort sortOptin = "desc".equalsIgnoreCase(sort)?
        		Sort.by(Sort.Direction.DESC,"deadline"):
        		Sort.by(Sort.Direction.ASC,"deadline");
        
        List<Task> tasks;
        
        if ("completed".equalsIgnoreCase(status)) {
        		tasks = taskService.getTasksByUserAndCompleted(user, true, sortOptin);	
        	}else if("incompleted".equalsIgnoreCase(status)){
        		tasks = taskService.getTasksByUserAndCompleted(user, false, sortOptin);
        	}else {
        		tasks = taskService.getTasksByUser(user,sortOption);
        	}
       
        	if("desc".equalsIgnoreCase(sort)) {
        		tasks = taskService.getTasksByUserOrderByDeadlineDesc(user);
        	}else {
        		tasks = taskService.getTasksByUserOrderByDeadlineAsc(user);
        	}
            model.addAttribute("tasks", tasks);
           model.addAttribute("sort", sort);
        } else {
           
        }
        return "task-list";
    }

    // タスク登録フォーム表示
    @GetMapping("/new")
    public String showTaskForm(Model model) {
    	
        model.addAttribute("task", new Task());
        return "task-form";
    }


    // タスク登録処理
    @PostMapping("/new")
    public String createTask(@ModelAttribute Task task, Principal principal) {
        Optional<User> userOpt = userService.findByEmail(principal.getName());
        if (userOpt.isPresent()) {
            taskService.createTaskForUser(task, userOpt.get());
            return "redirect:/tasks";
        } else {
            return "redirect:/login"; // 万一ユーザーが取得できなければログインに戻すなど
        }
    }
    //　タスク編集画面
    @GetMapping("/tasks/edit/{id}")
    public String showEditForm(@PathVariable Long id, Model model, Principal principal) {

    	Optional<User> userOpt = userService.findByEmail(principal.getName());
        Optional<Task> taskOpt = taskService.findById(id);

        if (userOpt.isPresent() && taskOpt.isPresent()) {
            User loginUser = userOpt.get();
            Task task = taskOpt.get();

            if (task.getUser().getId().equals(loginUser.getId())) {
                model.addAttribute("task", task);
                return "task-edit";
            }
        }
        return "redirect:/tasks";
    }
 //　タスク編集後
    @PostMapping("/tasks/edit/{id}")
    public String updateTask(@PathVariable Long id, @ModelAttribute Task updatedTask, Principal principal) {
        Optional<User> userOpt = userService.findByEmail(principal.getName());
        Optional<Task> taskOpt = taskService.findById(id);

        if (userOpt.isPresent() && taskOpt.isPresent()) {
            Task existingTask = taskOpt.get();

            // セキュリティチェック：タスクの所有者とログインユーザーが一致するか
            if (existingTask.getUser().getId().equals(userOpt.get().getId())) {
                // 更新内容を反映
                existingTask.setTitle(updatedTask.getTitle());
                existingTask.setDescription(updatedTask.getDescription());
                existingTask.setDeadline(updatedTask.getDeadline());
                existingTask.setCompleted(updatedTask.isCompleted());

                taskService.save(existingTask);
            }
        }

        return "redirect:/tasks";
    }


 // タスク削除処理
    @PostMapping("/delete/{id}")
    public String deleteTask(@PathVariable Long id, Principal principal) {
        Optional<User> userOpt = userService.findByEmail(principal.getName());
        Optional<Task> taskOpt = taskService.findById(id);

        if (userOpt.isPresent() && taskOpt.isPresent()) {
            Task task = taskOpt.get();

            // セキュリティ: ログインユーザーが所有者か確認
            if (task.getUser().getId().equals(userOpt.get().getId())) {
                taskService.deleteTask(task); // ← 実行
            }
        }

        return "redirect:/tasks";
    }
    
    @PostMapping("/tasks/update-status")
    public String updateTaskStatus(@RequestParam Long id,
                                   @RequestParam(required = false) String completed,
                                   Principal principal) {

        Optional<User> userOpt = userService.findByEmail(principal.getName());
        Optional<Task> taskOpt = taskService.findById(id);

        if (userOpt.isPresent() && taskOpt.isPresent()) {
            User loginUser = userOpt.get();
            Task task = taskOpt.get();

            if (task.getUser().getId().equals(loginUser.getId())) {
                // チェックボックスがオンなら"on"、オフならnullになる
                task.setCompleted(completed != null);
                taskService.save(task);
            }
        }

        return "redirect:/tasks";
    }


}
