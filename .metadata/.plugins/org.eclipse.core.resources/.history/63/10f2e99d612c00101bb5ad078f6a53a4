package com.example.portfolio.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.dao.DaoAuthenticationProvider;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
public class SecurityConfig {
	   private final CustomUserDetailsService userDetailsService;

	    public SecurityConfig(CustomUserDetailsService userDetailsService) {
	        this.userDetailsService = userDetailsService;
	    }
	    
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        http
            .authorizeHttpRequests(auth -> auth
                .anyRequest().permitAll() // 全部許可する
            )
            .csrf(csrf -> csrf.disable()) // CSRF保護も一旦無効
           // .formLogin(form -> form.disable()) // ログインフォームも無効
            .formLogin(form -> form
            	    .loginPage("/login") // 自作ログインページのURL
            	    .loginProcessingUrl("/login") // ログインPOST先URL
            	    .defaultSuccessUrl("/home", true) // ログイン成功後の遷移先
            	    .permitAll()
            	)
        	.logout(logout -> logout   
                .logoutUrl("/logout")  // ログアウト処理のURL
                .logoutSuccessUrl("/login?logout") // ログアウト後のリダイレクト先
                .invalidateHttpSession(true)  // セッション破棄
                .deleteCookies("JSESSIONID")); // セッションクッキーも削除
        return http.build();
    }
    
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
   
    @Bean
    public DaoAuthenticationProvider authenticationProvider() {
        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();
        provider.setUserDetailsService(userDetailsService);
        provider.setPasswordEncoder(passwordEncoder());
        return provider;
    }

    @Bean
    public AuthenticationManager authenticationManager(
            AuthenticationConfiguration configuration) throws Exception {
        return configuration.getAuthenticationManager();
    }
    


}
